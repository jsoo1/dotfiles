diff --git b/xpc-sys/build.rs a/xpc-sys/build.rs
index 158aca1..652ca0e 100644
--- b/xpc-sys/build.rs
+++ a/xpc-sys/build.rs
@@ -1,20 +1,12 @@
 extern crate bindgen;
-extern crate xcrun;

 use std::env;
 use std::path::PathBuf;

-use xcrun::SDK;
-
-static MACOS_INCLUDE_PATH: &str = "/usr/include";
+static MACOS_INCLUDE_PATH: &str = "@apple_sdk@/usr/include";

 fn main() {
-    let sdk_path = xcrun::find_sdk(SDK::macOS(None))
-        .and_then(|pb| pb.to_str().map(String::from))
-        .and_then(|p| p.strip_suffix("\n").map(String::from))
-        .expect("macOS SDK Required");
-
-    let xpc_path = format!("{}{}/xpc/xpc.h", sdk_path, MACOS_INCLUDE_PATH);
-    let bootstrap_path = format!("{}{}/bootstrap.h", sdk_path, MACOS_INCLUDE_PATH);
-    let sys_types = format!("{}{}/sys/types.h", sdk_path, MACOS_INCLUDE_PATH);
-    let sysctl = format!("{}{}/sys/sysctl.h", sdk_path, MACOS_INCLUDE_PATH);
+    let xpc_path = format!("{}/xpc/xpc.h", MACOS_INCLUDE_PATH);
+    let bootstrap_path = format!("{}/bootstrap.h", MACOS_INCLUDE_PATH);
+    let sys_types = format!("{}/sys/types.h", MACOS_INCLUDE_PATH);
+    let sysctl = format!("{}/sys/sysctl.h", MACOS_INCLUDE_PATH);

     // The bindgen::Builder is the main entry point
     // to bindgen, and lets you build up options for
@@ -25,6 +17,7 @@ fn main() {
     let bindings = bindgen::Builder::default()
         // The input header we would like to generate
         // bindings for.
+        .clang_arg(format!("-I{}", MACOS_INCLUDE_PATH))
         .header(xpc_path)
         .header(bootstrap_path)
         .header(sys_types)
